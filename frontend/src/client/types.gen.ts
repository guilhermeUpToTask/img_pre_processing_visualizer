// This file is auto-generated by @hey-api/openapi-ts

/**
 * BinarizationParams
 * Parameters for image binarization.
 */
export type BinarizationParams = {
    technique: BinarizationTechniques;
    /**
     * Threshold
     */
    threshold?: number;
};

/**
 * BinarizationTechniques
 * Techniques for image binarization.
 */
export type BinarizationTechniques = 'binary' | 'binary_inv' | 'trunc' | 'tozero' | 'tozero_inv';

/**
 * Body_binarize_image_api_v1_preprocess_binarization_post
 */
export type BodyBinarizeImageApiV1PreprocessBinarizationPost = {
    params: BinarizationParams;
    /**
     * Image
     */
    image: Blob | File;
};

/**
 * Body_crop_image_api_v1_preprocess_crop_post
 */
export type BodyCropImageApiV1PreprocessCropPost = {
    /**
     * Img In
     */
    img_in: Blob | File;
};

/**
 * Body_enhance_contrast_image_api_v1_preprocess_contrast_post
 */
export type BodyEnhanceContrastImageApiV1PreprocessContrastPost = {
    params: ContrastParams;
    /**
     * Image
     */
    image: Blob | File;
};

/**
 * Body_grayscale_image_api_v1_preprocess_grayscale_post
 */
export type BodyGrayscaleImageApiV1PreprocessGrayscalePost = {
    /**
     * Img In
     */
    img_in: Blob | File;
};

/**
 * Body_noise_reduct_image_api_v1_preprocess_noise_reduction_post
 */
export type BodyNoiseReductImageApiV1PreprocessNoiseReductionPost = {
    params: NoiseReductionParams;
    /**
     * Image
     */
    image: Blob | File;
};

/**
 * Body_normalize_image_api_v1_preprocess_normalization_post
 */
export type BodyNormalizeImageApiV1PreprocessNormalizationPost = {
    params: NormalizationParams;
    /**
     * Img In
     */
    img_in: Blob | File;
};

/**
 * Body_resize_image_api_v1_preprocess_resize_post
 */
export type BodyResizeImageApiV1PreprocessResizePost = {
    params: ResizeParams;
    /**
     * Img In
     */
    img_in: Blob | File;
};

/**
 * ContrastParams
 * Parameters for contrast enhancement.
 */
export type ContrastParams = {
    technique: ContrastTechniques;
    /**
     * Clip Limit
     */
    clip_limit?: number;
    /**
     * Tile Grid Size
     */
    tile_grid_size?: number;
};

/**
 * ContrastTechniques
 * Techniques for contrast enhancement.
 */
export type ContrastTechniques = 'clahe';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * NoiseReductionParams
 * Parameters for noise reduction.
 */
export type NoiseReductionParams = {
    technique: NoiseReductionTechniques;
    /**
     * Kernel Size
     */
    kernel_size?: number;
    /**
     * Sigma Color
     */
    sigma_color?: number;
    /**
     * Sigma Space
     */
    sigma_space?: number;
};

/**
 * NoiseReductionTechniques
 * Techniques for noise reduction.
 */
export type NoiseReductionTechniques = 'gaussian_blur' | 'median_blur' | 'bilateral_filter';

/**
 * NormalizationParams
 * Parameters for image normalization.
 */
export type NormalizationParams = {
    technique: NormalizationTechniques;
};

/**
 * NormalizationTechniques
 * Techniques for image normalization.
 */
export type NormalizationTechniques = 'rescaling' | 'histogram_equalization';

/**
 * ResizeParams
 * Parameters for resizing an image.
 */
export type ResizeParams = {
    /**
     * Width
     */
    width: number;
    /**
     * Height
     */
    height: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ResizeImageApiV1PreprocessResizePostData = {
    body: BodyResizeImageApiV1PreprocessResizePost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/resize';
};

export type ResizeImageApiV1PreprocessResizePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResizeImageApiV1PreprocessResizePostError = ResizeImageApiV1PreprocessResizePostErrors[keyof ResizeImageApiV1PreprocessResizePostErrors];

export type ResizeImageApiV1PreprocessResizePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CropImageApiV1PreprocessCropPostData = {
    body: BodyCropImageApiV1PreprocessCropPost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/crop';
};

export type CropImageApiV1PreprocessCropPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CropImageApiV1PreprocessCropPostError = CropImageApiV1PreprocessCropPostErrors[keyof CropImageApiV1PreprocessCropPostErrors];

export type CropImageApiV1PreprocessCropPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GrayscaleImageApiV1PreprocessGrayscalePostData = {
    body: BodyGrayscaleImageApiV1PreprocessGrayscalePost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/grayscale';
};

export type GrayscaleImageApiV1PreprocessGrayscalePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GrayscaleImageApiV1PreprocessGrayscalePostError = GrayscaleImageApiV1PreprocessGrayscalePostErrors[keyof GrayscaleImageApiV1PreprocessGrayscalePostErrors];

export type GrayscaleImageApiV1PreprocessGrayscalePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type NoiseReductImageApiV1PreprocessNoiseReductionPostData = {
    body: BodyNoiseReductImageApiV1PreprocessNoiseReductionPost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/noise_reduction';
};

export type NoiseReductImageApiV1PreprocessNoiseReductionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NoiseReductImageApiV1PreprocessNoiseReductionPostError = NoiseReductImageApiV1PreprocessNoiseReductionPostErrors[keyof NoiseReductImageApiV1PreprocessNoiseReductionPostErrors];

export type NoiseReductImageApiV1PreprocessNoiseReductionPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type NormalizeImageApiV1PreprocessNormalizationPostData = {
    body: BodyNormalizeImageApiV1PreprocessNormalizationPost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/normalization';
};

export type NormalizeImageApiV1PreprocessNormalizationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NormalizeImageApiV1PreprocessNormalizationPostError = NormalizeImageApiV1PreprocessNormalizationPostErrors[keyof NormalizeImageApiV1PreprocessNormalizationPostErrors];

export type NormalizeImageApiV1PreprocessNormalizationPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BinarizeImageApiV1PreprocessBinarizationPostData = {
    body: BodyBinarizeImageApiV1PreprocessBinarizationPost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/binarization';
};

export type BinarizeImageApiV1PreprocessBinarizationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BinarizeImageApiV1PreprocessBinarizationPostError = BinarizeImageApiV1PreprocessBinarizationPostErrors[keyof BinarizeImageApiV1PreprocessBinarizationPostErrors];

export type BinarizeImageApiV1PreprocessBinarizationPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EnhanceContrastImageApiV1PreprocessContrastPostData = {
    body: BodyEnhanceContrastImageApiV1PreprocessContrastPost;
    path?: never;
    query?: never;
    url: '/api/v1/preprocess/contrast';
};

export type EnhanceContrastImageApiV1PreprocessContrastPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EnhanceContrastImageApiV1PreprocessContrastPostError = EnhanceContrastImageApiV1PreprocessContrastPostErrors[keyof EnhanceContrastImageApiV1PreprocessContrastPostErrors];

export type EnhanceContrastImageApiV1PreprocessContrastPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};