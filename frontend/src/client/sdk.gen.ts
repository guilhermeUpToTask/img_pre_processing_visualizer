// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ResizeImageApiV1PreprocessResizePostData, ResizeImageApiV1PreprocessResizePostResponses, ResizeImageApiV1PreprocessResizePostErrors, CropImageApiV1PreprocessCropPostData, CropImageApiV1PreprocessCropPostResponses, CropImageApiV1PreprocessCropPostErrors, GrayscaleImageApiV1PreprocessGrayscalePostData, GrayscaleImageApiV1PreprocessGrayscalePostResponses, GrayscaleImageApiV1PreprocessGrayscalePostErrors, NoiseReductImageApiV1PreprocessNoiseReductionPostData, NoiseReductImageApiV1PreprocessNoiseReductionPostResponses, NoiseReductImageApiV1PreprocessNoiseReductionPostErrors, NormalizeImageApiV1PreprocessNormalizationPostData, NormalizeImageApiV1PreprocessNormalizationPostResponses, NormalizeImageApiV1PreprocessNormalizationPostErrors, BinarizeImageApiV1PreprocessBinarizationPostData, BinarizeImageApiV1PreprocessBinarizationPostResponses, BinarizeImageApiV1PreprocessBinarizationPostErrors, EnhanceContrastImageApiV1PreprocessContrastPostData, EnhanceContrastImageApiV1PreprocessContrastPostResponses, EnhanceContrastImageApiV1PreprocessContrastPostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Preprocessing {
    /**
     * Resize Image
     * Resize an image.
     *
     * Args:
     * params: The resize parameters.
     * img_in: The image to resize.
     *
     * Returns:
     * The resized image.
     *
     * Sources:
     * https://docs.opencv.org/4.x/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d
     */
    public static resizeImageApiV1PreprocessResizePost<ThrowOnError extends boolean = false>(options: Options<ResizeImageApiV1PreprocessResizePostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ResizeImageApiV1PreprocessResizePostResponses, ResizeImageApiV1PreprocessResizePostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/resize',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Crop Image
     * Crop an image to a square in the center.
     *
     * Args:
     * img_in: The image to crop.
     *
     * Returns:
     * The cropped image.
     */
    public static cropImageApiV1PreprocessCropPost<ThrowOnError extends boolean = false>(options: Options<CropImageApiV1PreprocessCropPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CropImageApiV1PreprocessCropPostResponses, CropImageApiV1PreprocessCropPostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/crop',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Grayscale Image
     * Convert an image to grayscale.
     *
     * Args:
     * img_in: The image to convert.
     *
     * Returns:
     * The grayscaled image.
     *
     * Sources:
     * https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab
     */
    public static grayscaleImageApiV1PreprocessGrayscalePost<ThrowOnError extends boolean = false>(options: Options<GrayscaleImageApiV1PreprocessGrayscalePostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<GrayscaleImageApiV1PreprocessGrayscalePostResponses, GrayscaleImageApiV1PreprocessGrayscalePostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/grayscale',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Noise Reduct Image
     * Apply noise reduction to an image.
     *
     * Args:
     * params: The noise reduction parameters.
     * image: The image to process.
     *
     * Returns:
     * The processed image.
     *
     * Sources:
     * - Gaussian Blur: https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1
     * - Median Blur: https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9
     * - Bilateral Filter: https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf859260703f
     */
    public static noiseReductImageApiV1PreprocessNoiseReductionPost<ThrowOnError extends boolean = false>(options: Options<NoiseReductImageApiV1PreprocessNoiseReductionPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<NoiseReductImageApiV1PreprocessNoiseReductionPostResponses, NoiseReductImageApiV1PreprocessNoiseReductionPostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/noise_reduction',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Normalize Image
     * Normalize an image.
     *
     * Args:
     * params: The normalization parameters.
     * img_in: The image to normalize.
     *
     * Returns:
     * The normalized image.
     *
     * Sources:
     * - Rescaling: https://docs.opencv.org/4.x/d2/de8/group__core__array.html#ga87eef7ee3970f86906d1e9d701839f6e
     * - Histogram Equalization: https://docs.opencv.org/4.x/d6/dc7/group__imgproc__hist.html#ga7e54091f0c937d49bf84152a16f76d6e
     */
    public static normalizeImageApiV1PreprocessNormalizationPost<ThrowOnError extends boolean = false>(options: Options<NormalizeImageApiV1PreprocessNormalizationPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<NormalizeImageApiV1PreprocessNormalizationPostResponses, NormalizeImageApiV1PreprocessNormalizationPostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/normalization',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Binarize Image
     * Binarize an image.
     *
     * Args:
     * params: The binarization parameters.
     * image: The image to binarize.
     *
     * Returns:
     * The binarized image.
     *
     * Sources:
     * https://docs.opencv.org/4.x/d7/d4d/group__imgproc__threshold.html#ga72b913f352e4a1b1b397736707afcde3
     */
    public static binarizeImageApiV1PreprocessBinarizationPost<ThrowOnError extends boolean = false>(options: Options<BinarizeImageApiV1PreprocessBinarizationPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<BinarizeImageApiV1PreprocessBinarizationPostResponses, BinarizeImageApiV1PreprocessBinarizationPostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/binarization',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Enhance Contrast Image
     * Enhance the contrast of an image.
     *
     * Args:
     * params: The contrast enhancement parameters.
     * image: The image to process.
     *
     * Returns:
     * The processed image.
     *
     * Sources:
     * https://docs.opencv.org/4.x/d6/dc7/group__imgproc__hist.html#a5d2d804e716140362f3b9b191447b393
     */
    public static enhanceContrastImageApiV1PreprocessContrastPost<ThrowOnError extends boolean = false>(options: Options<EnhanceContrastImageApiV1PreprocessContrastPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<EnhanceContrastImageApiV1PreprocessContrastPostResponses, EnhanceContrastImageApiV1PreprocessContrastPostErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/api/v1/preprocess/contrast',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
}